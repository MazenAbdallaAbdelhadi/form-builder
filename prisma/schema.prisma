// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  forms Form[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Form{
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  published Boolean @default(false)
  name String
  description String @default("")
  content String @default("[]")
  visits Int @default(0)
  submissions Int @default(0)

  shareURL String @default(uuid())
  formSubmissions FormSubmissions[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, name])
}


model FormSubmissions{
  id String @id @default(cuid())
  
  formId String
  form Form @relation(fields: [formId], references: [id])

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
